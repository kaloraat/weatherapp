{"version":3,"sources":["actions/index.js","containers/SearchBar.js","components/Chart.js","containers/WeatherList.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/weatherReducer.js","index.js"],"names":["ROOT_URL","concat","fetchWeather","city","url","type","payload","axios","get","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","onInputChange","bind","assertThisInitialized","onFormSubmit","event","setState","target","value","preventDefault","length","react_default","a","createElement","className","onSubmit","style","paddingBottom","placeholder","autoFocus","onChange","Component","connect","dispatch","bindActionCreators","Chart","_ref","data","color","units","build","height","width","_","round","sum","average","WeatherList","cityData","name","temps","map","list","weather","main","temp","pressures","pressure","humidities","humidity","key","renderWeather","App","containers_SearchBar","containers_WeatherList","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","createStoreWithMiddleware","composeWithDevTools","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b675963a.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_KEY = 'f410c733185e280315e351843591615c'\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER'\n\nexport function fetchWeather(city) {\n    const url = `${ROOT_URL}&q=${city}`\n    const request = axios.get(url)\n\n    return {\n        type: 'FETCH_WEATHER',\n        payload: request\n    }\n}","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchWeather } from '../actions'\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { term: \"sydney\" };\n        // bind\n        this.onInputChange = this.onInputChange.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this)\n    }\n    // methods\n    onInputChange(event) {\n        // console.log(event.target.value);\n        this.setState({ term: event.target.value });\n    }\n\n    onFormSubmit(event) {\n        event.preventDefault();\n        if (this.state.term.length > 0) {\n            this.props.fetchWeather(this.state.term)\n            this.setState({ term: '' })\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchWeather(this.state.term)\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <form onSubmit={this.onFormSubmit} className=\"row mt-3\">\n                        <div className=\"col-12 col-sm pr-sm-0\">\n                            <input\n                                style={{ paddingBottom: \"12px\" }}\n                                placeholder=\"Weather forecast for next 5 days\"\n                                className=\"form-control\"\n                                autoFocus\n                                value={this.state.term}\n                                onChange={this.onInputChange}\n                            />\n                        </div>\n                        <div className=\"col-12 col-sm-auto pl-sm-0\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary btn-block btn-raised\"\n                            >\n                                Submit\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({ fetchWeather }, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar)","import React from 'react'\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';\nimport _ from 'lodash';\n\nfunction average(data) {\n    return _.round(_.sum(data) / data.length)\n}\n\nexport default ({ data, color, units }) => {\n    return (\n        <div>\n            <Sparklines height={120} width={180} data={data}>\n                <SparklinesLine color={color} />\n                <SparklinesReferenceLine type=\"avg\" />\n            </Sparklines>\n            <div>{average(data)} {units}</div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Chart from '../components/Chart'\nimport _ from 'lodash'\n// import GoogleMap from '../components/GoogleMap'\n\nclass WeatherList extends Component {\n    // methods\n    renderWeather(cityData) {\n        const name = cityData.city.name\n        const temps = _.map(cityData.list.map(weather => weather.main.temp), (temp) => temp - 273.15)\n        const pressures = cityData.list.map(weather => weather.main.pressure)\n        const humidities = cityData.list.map(weather => weather.main.humidity)\n        // const { lat, lon } = cityData.city.coord\n        // console.log(temps)\n\n        return (\n            <tr key={name}>\n                {/* <td><GoogleMap lon={lon} lat={lat} />{name}</td> */}\n                <td>\n                    <h2>{name}</h2>\n                </td>\n                <td>\n                    <Chart data={temps} color=\"orange\" units=\"ºC\" />\n                </td>\n                <td>\n                    <Chart data={pressures} color=\"green\" units=\"hPa\" />\n                </td>\n                <td>\n                    <Chart data={humidities} color=\"black\" units=\"%\" />\n                </td>\n            </tr>\n        )\n    }\n\n    render() {\n        return (\n            <table className=\"table table-hover\">\n                <thead>\n                    <tr>\n                        <th>City</th>\n                        <th>Temperature (ºC)</th>\n                        <th>Pressure (hPa)</th>\n                        <th>Humidity (%)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.weather.map(this.renderWeather)}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nfunction mapStateToProps({ weather }) {\n    return { weather }\n}\n\nexport default connect(mapStateToProps)(WeatherList)","import React, { Component } from \"react\";\nimport SearchBar from \"../containers/SearchBar\";\nimport WeatherList from \"../containers/WeatherList\";\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron bg-primary text-center\">\n                    <h1 className=\"display-3 text-light mt-2\">Weather App Client</h1>\n                    <hr />\n                    <p className=\"lead\">Build with React Redux and OpenWeatherMap API</p>\n                </div>\n                <div className=\"container-fluid\">\n                    <SearchBar />\n                    <WeatherList />\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport weatherReducer from './weatherReducer'\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer\n});\n\nexport default rootReducer;\n","import { FETCH_WEATHER } from '../actions'\n\nexport default function (state = [], action) {\n    switch (action.type) {\n        case FETCH_WEATHER:\n            return [action.payload.data, ...state]\n    }\n    return state\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxPromise from 'redux-promise'\nimport App from \"./components/App\";\nimport './styles/main.css'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport reducers from \"./reducers\";\n\nconst createStoreWithMiddleware = composeWithDevTools(applyMiddleware(ReduxPromise))(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}